name: Backend CI-CD
on:
    workflow_dispatch:
    push:
        branches:
            main
env:
  DB_HOST_URL: ./starter/frontend
  PYTHON_PATH: ./analytics
  KUBERNETES_PATH: ./setup-k8
  AWS_REGION: "eu-central-1"
  EKS_CLUSTER_NAME: movie-picture-cluster
  ECS_REPO_NAME: movie-picture-frontend


jobs:
    build-job:
        runs-on: ubuntu-latest

        # Permission can be added at job level or workflow level    
        permissions:
            id-token: write   # This is required for requesting the JWT
            contents: read    # This is required for actions/checkout
        steps:
            - name: Git clone the repository
              uses: actions/checkout@v3

            - name: configure aws credentials
              uses: aws-actions/configure-aws-credentials@v4.0.2
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}
                role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/Github-runner-role
                role-duration-seconds: 3600
                role-session-name: GitHub_to_AWS_via_Temp_Credentials
            
            - name: Sts GetCallerIdentity
              run: |
                aws sts get-caller-identity

            - name: Login to ECR
              id: ecr-login
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and push image to ECR
              working-directory: ${{ env.PYTHON_PATH }}
              env:
                DBHOST_URL:
                REGISTRY: ${{ steps.ecr-login.outputs.registry }}
                REPOSITORY: ${{ env.ECS_REPO_NAME }} 
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build --build-arg=DB_HOST_URL=$DBHOST_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
# docker build --build-arg=DB_HOST_URL=http://localhost:5432  --build-arg=DB_USERNAME=ADMIN --build-arg=DB_PASSWORD=ADMIN --tag python-docker .

            - name: Update cluster name
              run: |
                aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

            - name: Install kubectl
              uses: azure/setup-kubectl@v3

            - name: Check k8s config minify
              run: |
                kubectl config view --minify

            - name: Check k8s config
              run: |
                kubectl get svc

            - name: Change docker image version
              env:
                REGISTRY: ${{ steps.ecr-login.outputs.registry }}
                REPOSITORY: ${{ env.ECS_REPO_NAME }} 
                IMAGE_TAG: ${{ github.sha }}
                working-directory: ${{ env.KUBERNETES_PATH }}
              run: |
                kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

            - name: Deploy the Docker image to Amazon EKS
              working-directory: ${{ env.KUBERNETES_PATH }}
                # output of build command is input for kubectl apply command !
              run: |
                kustomize build | kubectl apply -f - --validate=false